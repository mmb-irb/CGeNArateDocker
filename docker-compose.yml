services:
  # apache:
  #   image: apache_image   # name of apache image
  #   build:
  #     context: ./apache   # folder to search Dockerfile for this image
  #     args:
  #       WEBSITE_INNER_PORT: ${WEBSITE_INNER_PORT} 
  #       APACHE_HTTP_INNER_PORT: ${APACHE_HTTP_INNER_PORT}
  #       APACHE_HTTPS_INNER_PORT: ${APACHE_HTTPS_INNER_PORT}
  #   ports:
  #     - "${APACHE_HTTP_OUTER_PORT}:${APACHE_HTTP_INNER_PORT}"
  #     - "${APACHE_HTTPS_OUTER_PORT}:${APACHE_HTTPS_INNER_PORT}"
  #   networks:
  #     - webnet
  #   deploy:
  #     replicas: ${APACHE_REPLICAS}  # Ensure this service is not deployed by default as it is a one-time task
  #     resources:
  #       limits:
  #         cpus: ${APACHE_CPU_LIMIT}   # Specify the limit number of CPUs
  #         memory: ${APACHE_MEMORY_LIMIT}   # Specify the limit memory
  #       reservations:
  #         cpus: ${APACHE_CPU_RESERVATION}   # Specify the reserved number of CPUs
  #         memory: ${APACHE_MEMORY_RESERVATION}   # Specify the reserved memory
  #     restart_policy:
  #       condition: any   # Restart always

  website:
    image: website_image   # name of website image
    build:
      context: ./website  # folder to search Dockerfile for this image
      args:
        WEBSITE_INNER_PORT: ${WEBSITE_INNER_PORT}
    depends_on:
      - mongodb
    ports:
      - "${WEBSITE_PORT}:${WEBSITE_INNER_PORT}"   # port mapping, be aware that the second port is the same exposed in the website/Dockerfile
    volumes:
      - web_volume:/data   # path where the data generated by the website will be stored
      - scripts_volume:/scripts   # path where the scripts used by the website will be stored
    networks:
      - dbnet
      - webnet
    deploy:
      replicas: ${WEBSITE_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${WEBSITE_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${WEBSITE_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${WEBSITE_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${WEBSITE_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: any   # Restart always
      update_config:
        order: start-first  # Priority over other services

  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_PORT: ${DB_OUTER_PORT}
      MONGO_INITDB_DATABASE: ${DB_DATABASE}
      WEBSITE_SERVER_DB_LOGIN: ${WEBSITE_DB_LOGIN}
      WEBSITE_SERVER_DB_PASSWORD: ${WEBSITE_DB_PASSWORD}
    ports:
      - "${DB_OUTER_PORT}:${DB_INNER_PORT}"
    volumes:
      - db_volume:/data/db   # path where the database will be stored (outside the container, in the host machine)
      - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro   # path to the initialization script
    networks:
      - dbnet
    deploy:
      replicas: ${DB_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${DB_CPU_LIMIT}    # Specify the limit number of CPUs
          memory: ${DB_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${DB_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${DB_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: on-failure   # Restart only on failure

volumes:
  db_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DB_VOLUME_PATH}   # bind the volume to DB_VOLUME_PATH on the host
  web_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${WEBSITE_VOLUME_PATH}   # bind the volume to WEBSITE_VOLUME_PATH on the host

      

networks:
  dbnet: 
    external: true   # Use an external network
  webnet:
    external: true   # Use an external network