services:
  website:
    image: website_image   # name of website image
    build:
      context: ./website  # folder to search Dockerfile for this image
      args:
        WEBSITE_INNER_PORT: ${WEBSITE_INNER_PORT}
    depends_on:
      - mongodb
      - sge
    ports:
      - "${WEBSITE_PORT}:${WEBSITE_INNER_PORT}"   # port mapping, be aware that the second port is the same exposed in the website/Dockerfile
    volumes:
      - ${WEBSITE_DATA_VOLUME_PATH}:/data   # path where the data generated by the website will be stored
      - ${WEBSITE_VOLUME_PATH}:/var/www/html   # path for the website code
      - ${SCRIPTS_VOLUME_PATH}:/scripts   # path where the scripts used by the website will be stored
    networks:
      - dbnet
      - sgenet
    deploy:
      replicas: ${WEBSITE_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${WEBSITE_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${WEBSITE_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${WEBSITE_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${WEBSITE_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: any   # Restart always
      update_config:
        order: start-first  # Priority over other services

  workflow:
    image: workflow_image   # name of workflow image
    build:
      context: ./workflow  # folder to search Dockerfile for this image
    networks:
      - dbnet
    volumes:
      - workflow_data:/mnt
    deploy:
      replicas: ${WORKFLOW_REPLICAS}  # Ensure this service is not deployed by default as it is a one-time task
      resources:
        limits:
          cpus: ${WORKFLOW_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${WORKFLOW_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${WORKFLOW_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${WORKFLOW_MEMORY_RESERVATION}   # Specify the reserved memory

  sge:
    image: sge_image   # name of SGE image
    build:
      context: ./sge  # folder to search Dockerfile for this image
    networks:
      - sgenet
    ports:
      - 22:22
      - 6444:6444
    volumes:
      - workflow_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    devices:
      - '/dev/fuse:/dev/fuse'
    cap_add:
        - SYS_ADMIN
    security_opt:
        - apparmor:unconfined
    stdin_open: true
    restart: always
    deploy:
      replicas: ${SGE_REPLICAS}  # Ensure this service is not deployed by default as it is a one-time task
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: ${SGE_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${SGE_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${SGE_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${SGE_MEMORY_RESERVATION}   # Specify the reserved memory

  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_PORT: ${DB_OUTER_PORT}
      MONGO_INITDB_DATABASE: ${DB_DATABASE}
      WEBSITE_SERVER_DB_LOGIN: ${WEBSITE_DB_LOGIN}
      WEBSITE_SERVER_DB_PASSWORD: ${WEBSITE_DB_PASSWORD}
      DB_COLLECTION_WFS: ${DB_COLLECTION_WFS}
      DB_COLLECTION_PRJ: ${DB_COLLECTION_PRJ}
    ports:
      - "${DB_OUTER_PORT}:${DB_INNER_PORT}"
    volumes:
      - ${DB_VOLUME_PATH}:/data/db   # path where the database will be stored (outside the container, in the host machine)
      - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro   # path to the initialization script
    networks:
      - dbnet
    deploy:
      replicas: ${DB_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${DB_CPU_LIMIT}    # Specify the limit number of CPUs
          memory: ${DB_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${DB_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${DB_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: on-failure   # Restart only on failure

  mongo-seed:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_PORT: ${DB_OUTER_PORT}
      MONGO_INITDB_DATABASE: ${DB_DATABASE}
      DB_HOST: ${DB_HOST}
      DB_COLLECTION_WFS: ${DB_COLLECTION_WFS}
      DB_COLLECTION_PRJ: ${DB_COLLECTION_PRJ}
    depends_on:
      - mongodb
    networks:
      - dbnet
    volumes:
      - "./mongodb/${DB_COLLECTION_WFS}.json:/${DB_COLLECTION_WFS}.json:ro"
      - "./mongodb/${DB_COLLECTION_PRJ}.json:/${DB_COLLECTION_PRJ}.json:ro"
      - ./mongodb/import.sh:/import.sh:ro
    entrypoint: ["bash", "/import.sh"]
    deploy:
      replicas: 1  # Ensures it runs only once
      restart_policy:
        condition: none  # Prevents auto-restart after completion

volumes:
  workflow_data:
    external: true

networks:
  dbnet: 
    external: true   # Use an external network
  sgenet:
    external: true   # Use an external network